/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/github.ts":
/*!***************************!*\
  !*** ./src/lib/github.ts ***!
  \***************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// import { Octokit } from '@octokit/rest';\n// import type { RestEndpointMethodTypes } from '@octokit/plugin-rest-endpoint-methods';\n// import * as dotenv from 'dotenv';\n// type UserResponse = RestEndpointMethodTypes[\"users\"][\"getByUsername\"][\"response\"];\n// type ReposResponse = RestEndpointMethodTypes[\"repos\"][\"listForUser\"][\"response\"];\n// type CommitsResponse = RestEndpointMethodTypes[\"repos\"][\"listCommits\"][\"response\"];\n// class GitHubService {\n//   private static instance: GitHubService;\n//   public readonly octokit: Octokit;\n//   private readonly MAX_RETRIES = 3;\n//   private readonly RETRY_DELAY = 1000; // 1 second\n//   private constructor() {\n//     const token = \"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\";\n//     console.log('GitHub token:', token); // Add this line to verify the token\n//     if (!token) {\n//       console.error('GitHub token is not set in environment variables');\n//       throw new Error('GitHub token is not set in environment variables');\n//     }\n//     this.octokit = new Octokit({\n//       auth: token,\n//     });\n//   }\n//   public static getInstance(): GitHubService {\n//     if (!GitHubService.instance) {\n//       GitHubService.instance = new GitHubService();\n//     }\n//     return GitHubService.instance;\n//   }\n//   private async retryOperation<T>(operation: () => Promise<T>): Promise<T> {\n//     let lastError: Error | null = null;\n//     for (let i = 0; i < this.MAX_RETRIES; i++) {\n//       try {\n//         return await operation();\n//       } catch (error: any) {\n//         console.error('GitHub API error:', error);\n//         lastError = error;\n//         if (error.status === 403) {\n//           // Rate limit exceeded, wait longer\n//           await new Promise(resolve => setTimeout(resolve, this.RETRY_DELAY * Math.pow(2, i)));\n//         } else {\n//           throw error;\n//         }\n//       }\n//     }\n//     throw lastError;\n//   }\n//   async getUserData(username: string): Promise<UserResponse> {\n//     console.log('Fetching user data for:', username); // Add this line to verify the username\n//     const data = await this.retryOperation(() => \n//       this.octokit.users.getByUsername({ username:\"kalyanbathula\" })\n//     );\n//     console.log('User Data:', data); // Add this line to verify the response\n//     return data;\n//   }\n//   async getRepositories(username: string = 'kalyanbathula', options: any = {}): Promise<ReposResponse> {\n//     console.log('Fetching repositories for:', username); // Add this line to verify the username\n//     const data = await this.retryOperation(() => \n//       this.octokit.repos.listForUser({ \n//         username: 'kalyanbathula', // Hardcoded username\n//         per_page: 100, \n//         sort: 'updated', \n//         type: 'all', \n//         ...options \n//       })\n//     );\n//     console.log('Repositories Data:', data); // Add this line to verify the response\n//     return data;\n// }\n//   async getRepositoryCommits(owner: string, repo: string, options: any = {}): Promise<CommitsResponse> {\n//     console.log('Fetching commits for:', owner, repo); // Add this line to verify the owner and repo\n//     const data = await this.retryOperation(() => \n//       this.octokit.repos.listCommits({ owner, repo, ...options })\n//     );\n//     console.log('Commits Data:', data); // Add this line to verify the response\n//     return data;\n//   }\n//   async isTokenValid(): Promise<boolean> {\n//     console.log('isTokenValid method called'); // Add this line\n//     try {\n//       const response = await this.octokit.users.getAuthenticated();\n//       console.log(response);\n//       console.log('GitHub Authentication Success:', response.data.login);\n//       return true;\n//     } catch (error) {\n//       console.error('GitHub token validation error:', error);\n//       return false;\n//     }\n//   }\n// }\n// export const githubService = GitHubService.getInstance();\n// import { Octokit } from '@octokit/rest';\n// import type { RestEndpointMethodTypes } from '@octokit/plugin-rest-endpoint-methods';\n// type UserResponse = RestEndpointMethodTypes[\"users\"][\"getByUsername\"][\"response\"];\n// type ReposResponse = RestEndpointMethodTypes[\"repos\"][\"listForUser\"][\"response\"];\n// type CommitsResponse = RestEndpointMethodTypes[\"repos\"][\"listCommits\"][\"response\"];\n// class GitHubService {\n//   private static instance: GitHubService;\n//   public readonly octokit: Octokit;\n//   private readonly MAX_RETRIES = 3;\n//   private readonly RETRY_DELAY = 1000; // 1 second\n//   private cache: { [key: string]: any } = {}; // Cache object\n//   private constructor() {\n//     const token = \"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\";\n//     console.log('GitHub token:', token); // Add this line to verify the token\n//     if (!token) {\n//       console.error('GitHub token is not set in environment variables');\n//       throw new Error('GitHub token is not set in environment variables');\n//     }\n//     this.octokit = new Octokit({\n//       auth: token,\n//     });\n//   }\n//   public static getInstance(): GitHubService {\n//     if (!GitHubService.instance) {\n//       GitHubService.instance = new GitHubService();\n//     }\n//     return GitHubService.instance;\n//   }\n//   private async retryOperation<T>(operation: () => Promise<T>): Promise<T> {\n//     let lastError: Error | null = null;\n//     for (let i = 0; i < this.MAX_RETRIES; i++) {\n//       try {\n//         return await operation();\n//       } catch (error: any) {\n//         console.error('GitHub API error:', error);\n//         lastError = error;\n//         if (error.status === 403) {\n//           // Rate limit exceeded, wait longer\n//           await new Promise(resolve => setTimeout(resolve, this.RETRY_DELAY * Math.pow(2, i)));\n//         } else {\n//           throw error;\n//         }\n//       }\n//     }\n//     throw lastError;\n//   }\n//   private getCachedData<T>(key: string): T | null {\n//     const cached = this.cache[key];\n//     if (cached && (Date.now() - cached.timestamp < 3600000)) { // Cache for 1 hour\n//       return cached.data;\n//     }\n//     return null;\n//   }\n//   private setCachedData<T>(key: string, data: T): void {\n//     this.cache[key] = {\n//       data,\n//       timestamp: Date.now()\n//     };\n//   }\n//   async getUserData(username: string): Promise<UserResponse> {\n//     const cacheKey = `user_${username}`;\n//     const cachedData = this.getCachedData<UserResponse>(cacheKey);\n//     if (cachedData) {\n//       console.log('Returning cached user data for:', username);\n//       return cachedData;\n//     }\n//     console.log('Fetching user data for:', username); // Add this line to verify the username\n//     const data = await this.retryOperation(() => \n//       this.octokit.users.getByUsername({ username })\n//     );\n//     console.log('User Data:', data); // Add this line to verify the response\n//     this.setCachedData(cacheKey, data);\n//     return data;\n//   }\n//   async getRepositories(username: string = 'kalyanbathula', options: any = {}): Promise<ReposResponse> {\n//     const cacheKey = `repos_${username}`;\n//     const cachedData = this.getCachedData<ReposResponse>(cacheKey);\n//     if (cachedData) {\n//       console.log('Returning cached repositories data for:', username);\n//       return cachedData;\n//     }\n//     console.log('Fetching repositories for:', username); // Add this line to verify the username\n//     const data = await this.retryOperation(() => \n//       this.octokit.repos.listForUser({ \n//         username: 'kalyanbathula', // Hardcoded username\n//         per_page: 100, \n//         sort: 'updated', \n//         type: 'all', \n//         ...options \n//       })\n//     );\n//     console.log('Repositories Data:', data); // Add this line to verify the response\n//     this.setCachedData(cacheKey, data);\n//     return data;\n//   }\n//   async getRepositoryCommits(owner: string, repo: string, options: any = {}): Promise<CommitsResponse> {\n//     const cacheKey = `commits_${owner}_${repo}`;\n//     const cachedData = this.getCachedData<CommitsResponse>(cacheKey);\n//     if (cachedData) {\n//       console.log('Returning cached commits data for:', owner, repo);\n//       return cachedData;\n//     }\n//     console.log('Fetching commits for:', owner, repo); // Add this line to verify the owner and repo\n//     const data = await this.retryOperation(() => \n//       this.octokit.repos.listCommits({ owner, repo, ...options })\n//     );\n//     console.log('Commits Data:', data); // Add this line to verify the response\n//     this.setCachedData(cacheKey, data);\n//     return data;\n//   }\n//   async isTokenValid(): Promise<boolean> {\n//     console.log('isTokenValid method called'); // Add this line\n//     try {\n//       const response = await this.octokit.users.getAuthenticated();\n//       console.log(response);\n//       console.log('GitHub Authentication Success:', response.data.login);\n//       return true;\n//     } catch (error) {\n//       console.error('GitHub token validation error:', error);\n//       return false;\n//     }\n//   }\n// }\n// export const githubService = GitHubService.getInstance();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/github.ts\n"));

/***/ })

});