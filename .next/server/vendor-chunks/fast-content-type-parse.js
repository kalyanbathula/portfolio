"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fast-content-type-parse";
exports.ids = ["vendor-chunks/fast-content-type-parse"];
exports.modules = {

/***/ "(ssr)/./node_modules/fast-content-type-parse/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/fast-content-type-parse/index.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("\nconst NullObject = function NullObject() {};\nNullObject.prototype = Object.create(null);\n/**\n * RegExp to match *( \";\" parameter ) in RFC 7231 sec 3.1.1.1\n *\n * parameter     = token \"=\" ( token / quoted-string )\n * token         = 1*tchar\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n *               / DIGIT / ALPHA\n *               ; any VCHAR, except delimiters\n * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE\n * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text\n * obs-text      = %x80-FF\n * quoted-pair   = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n */ const paramRE = /; *([!#$%&'*+.^\\w`|~-]+)=(\"(?:[\\v\\u0020\\u0021\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\v\\u0020-\\u00ff])*\"|[!#$%&'*+.^\\w`|~-]+) */gu;\n/**\n * RegExp to match quoted-pair in RFC 7230 sec 3.2.6\n *\n * quoted-pair = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n * obs-text    = %x80-FF\n */ const quotedPairRE = /\\\\([\\v\\u0020-\\u00ff])/gu;\n/**\n * RegExp to match type in RFC 7231 sec 3.1.1.1\n *\n * media-type = type \"/\" subtype\n * type       = token\n * subtype    = token\n */ const mediaTypeRE = /^[!#$%&'*+.^\\w|~-]+\\/[!#$%&'*+.^\\w|~-]+$/u;\n// default ContentType to prevent repeated object creation\nconst defaultContentType = {\n    type: \"\",\n    parameters: new NullObject()\n};\nObject.freeze(defaultContentType.parameters);\nObject.freeze(defaultContentType);\n/**\n * Parse media type to object.\n *\n * @param {string|object} header\n * @return {Object}\n * @public\n */ function parse(header) {\n    if (typeof header !== \"string\") {\n        throw new TypeError(\"argument header is required and must be a string\");\n    }\n    let index = header.indexOf(\";\");\n    const type = index !== -1 ? header.slice(0, index).trim() : header.trim();\n    if (mediaTypeRE.test(type) === false) {\n        throw new TypeError(\"invalid media type\");\n    }\n    const result = {\n        type: type.toLowerCase(),\n        parameters: new NullObject()\n    };\n    // parse parameters\n    if (index === -1) {\n        return result;\n    }\n    let key;\n    let match;\n    let value;\n    paramRE.lastIndex = index;\n    while(match = paramRE.exec(header)){\n        if (match.index !== index) {\n            throw new TypeError(\"invalid parameter format\");\n        }\n        index += match[0].length;\n        key = match[1].toLowerCase();\n        value = match[2];\n        if (value[0] === '\"') {\n            // remove quotes and escapes\n            value = value.slice(1, value.length - 1);\n            quotedPairRE.test(value) && (value = value.replace(quotedPairRE, \"$1\"));\n        }\n        result.parameters[key] = value;\n    }\n    if (index !== header.length) {\n        throw new TypeError(\"invalid parameter format\");\n    }\n    return result;\n}\nfunction safeParse(header) {\n    if (typeof header !== \"string\") {\n        return defaultContentType;\n    }\n    let index = header.indexOf(\";\");\n    const type = index !== -1 ? header.slice(0, index).trim() : header.trim();\n    if (mediaTypeRE.test(type) === false) {\n        return defaultContentType;\n    }\n    const result = {\n        type: type.toLowerCase(),\n        parameters: new NullObject()\n    };\n    // parse parameters\n    if (index === -1) {\n        return result;\n    }\n    let key;\n    let match;\n    let value;\n    paramRE.lastIndex = index;\n    while(match = paramRE.exec(header)){\n        if (match.index !== index) {\n            return defaultContentType;\n        }\n        index += match[0].length;\n        key = match[1].toLowerCase();\n        value = match[2];\n        if (value[0] === '\"') {\n            // remove quotes and escapes\n            value = value.slice(1, value.length - 1);\n            quotedPairRE.test(value) && (value = value.replace(quotedPairRE, \"$1\"));\n        }\n        result.parameters[key] = value;\n    }\n    if (index !== header.length) {\n        return defaultContentType;\n    }\n    return result;\n}\nmodule.exports[\"default\"] = {\n    parse,\n    safeParse\n};\nmodule.exports.parse = parse;\nmodule.exports.safeParse = safeParse;\nmodule.exports.defaultContentType = defaultContentType;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fast-content-type-parse/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fast-content-type-parse/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/fast-content-type-parse/index.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("\nconst NullObject = function NullObject() {};\nNullObject.prototype = Object.create(null);\n/**\n * RegExp to match *( \";\" parameter ) in RFC 7231 sec 3.1.1.1\n *\n * parameter     = token \"=\" ( token / quoted-string )\n * token         = 1*tchar\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n *               / DIGIT / ALPHA\n *               ; any VCHAR, except delimiters\n * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE\n * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text\n * obs-text      = %x80-FF\n * quoted-pair   = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n */ const paramRE = /; *([!#$%&'*+.^\\w`|~-]+)=(\"(?:[\\v\\u0020\\u0021\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\v\\u0020-\\u00ff])*\"|[!#$%&'*+.^\\w`|~-]+) */gu;\n/**\n * RegExp to match quoted-pair in RFC 7230 sec 3.2.6\n *\n * quoted-pair = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n * obs-text    = %x80-FF\n */ const quotedPairRE = /\\\\([\\v\\u0020-\\u00ff])/gu;\n/**\n * RegExp to match type in RFC 7231 sec 3.1.1.1\n *\n * media-type = type \"/\" subtype\n * type       = token\n * subtype    = token\n */ const mediaTypeRE = /^[!#$%&'*+.^\\w|~-]+\\/[!#$%&'*+.^\\w|~-]+$/u;\n// default ContentType to prevent repeated object creation\nconst defaultContentType = {\n    type: \"\",\n    parameters: new NullObject()\n};\nObject.freeze(defaultContentType.parameters);\nObject.freeze(defaultContentType);\n/**\n * Parse media type to object.\n *\n * @param {string|object} header\n * @return {Object}\n * @public\n */ function parse(header) {\n    if (typeof header !== \"string\") {\n        throw new TypeError(\"argument header is required and must be a string\");\n    }\n    let index = header.indexOf(\";\");\n    const type = index !== -1 ? header.slice(0, index).trim() : header.trim();\n    if (mediaTypeRE.test(type) === false) {\n        throw new TypeError(\"invalid media type\");\n    }\n    const result = {\n        type: type.toLowerCase(),\n        parameters: new NullObject()\n    };\n    // parse parameters\n    if (index === -1) {\n        return result;\n    }\n    let key;\n    let match;\n    let value;\n    paramRE.lastIndex = index;\n    while(match = paramRE.exec(header)){\n        if (match.index !== index) {\n            throw new TypeError(\"invalid parameter format\");\n        }\n        index += match[0].length;\n        key = match[1].toLowerCase();\n        value = match[2];\n        if (value[0] === '\"') {\n            // remove quotes and escapes\n            value = value.slice(1, value.length - 1);\n            quotedPairRE.test(value) && (value = value.replace(quotedPairRE, \"$1\"));\n        }\n        result.parameters[key] = value;\n    }\n    if (index !== header.length) {\n        throw new TypeError(\"invalid parameter format\");\n    }\n    return result;\n}\nfunction safeParse(header) {\n    if (typeof header !== \"string\") {\n        return defaultContentType;\n    }\n    let index = header.indexOf(\";\");\n    const type = index !== -1 ? header.slice(0, index).trim() : header.trim();\n    if (mediaTypeRE.test(type) === false) {\n        return defaultContentType;\n    }\n    const result = {\n        type: type.toLowerCase(),\n        parameters: new NullObject()\n    };\n    // parse parameters\n    if (index === -1) {\n        return result;\n    }\n    let key;\n    let match;\n    let value;\n    paramRE.lastIndex = index;\n    while(match = paramRE.exec(header)){\n        if (match.index !== index) {\n            return defaultContentType;\n        }\n        index += match[0].length;\n        key = match[1].toLowerCase();\n        value = match[2];\n        if (value[0] === '\"') {\n            // remove quotes and escapes\n            value = value.slice(1, value.length - 1);\n            quotedPairRE.test(value) && (value = value.replace(quotedPairRE, \"$1\"));\n        }\n        result.parameters[key] = value;\n    }\n    if (index !== header.length) {\n        return defaultContentType;\n    }\n    return result;\n}\nmodule.exports[\"default\"] = {\n    parse,\n    safeParse\n};\nmodule.exports.parse = parse;\nmodule.exports.safeParse = safeParse;\nmodule.exports.defaultContentType = defaultContentType;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fast-content-type-parse/index.js\n");

/***/ })

};
;